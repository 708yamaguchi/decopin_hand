<launch>

  <arg name="use_rosbag" default="false" />
  <arg name="filename" default="" />
  <arg name="save_noise" default="false" />
  <arg name="gui" default="false" />

  <group if="$(arg use_rosbag)" >
    <param name="use_sim_time" value="true" />
    <node name="rosbag_play"
          pkg="rosbag" type="play"
          args="$(arg filename) --clock --loop --pause"/>
  </group>

  <!-- if you want to publish /audio from microphone -->
  <group unless="$(arg use_rosbag)" >
    <include file="$(find audio_capture)/launch/capture.launch" >
      <arg name="device" value="hw:2,0" />
      <arg name="channels" value="1" />
      <arg name="sample_rate" value="44100" />
      <arg name="format" value="wave" />
      <arg name="ns" value="/" />
    </include>
  </group>

  <!-- Start: Data conversion -->
  <!-- audio -> spectrum -> mono spectrogram -> preprocessed mono spectrogram -->

  <!-- audio -> spectrum -->
  <node pkg="jsk_perception" type="audio_to_spectrum.py" name="audio_to_spectrum" respawn="true">
    <remap from="~audio" to="/audio" />
    <rosparam>
      <!-- meaning of rosparams below are described in audio_to_spectrum.py -->
      mic_sampling_rate: 44100
      fft_sampling_period: 0.1
      bitdepth: 16
      high_cut_freq: 20000
      low_cut_freq: 20
      fft_exec_rate: 600
    </rosparam>
  </node>

  <!-- spectrum -> mono spectrogram -->
  <node pkg="jsk_perception" type="spectrum_to_spectrogram.py" name="spectrum_to_spectrogram" respawn="true">
    <remap from="~spectrum" to="/audio_to_spectrum/spectrum_filtered" />
    <rosparam>
      <!-- meaning of rosparams below are described in spectrum_to_spectrogram.py -->
      image_height: 200
      image_width: 200
      spectrogram_period: 0.5
    </rosparam>
  </node>

  <!-- mono spectrogram -> preprocessed mono spectrogram -->
  <!-- 1. Noise subtraction by spectral subtraction method -->
  <!-- 2. Smooth spectrogram -->
  <!-- 3. Normalize spectrogram (32FC1 -> 8UC1, make each pixel value 0 ~ 255) -->
  <node pkg="decopin_hand" type="preprocess_gray_image.py" name="preprocess_gray_image" >
    <remap from="~input" to="/spectrum_to_spectrogram/spectrogram" />
  </node>

  <!-- audio -> spectrum -> mono spectrogram -> preprocessed mono spectrogram -->
  <!-- end: Data conversion -->

  <!-- Detect action based on pixel histogram-->
  <!-- Should we really use color histogram? or we should only use num of pixels of 0 value? -->
  <node pkg="decopin_hand" type="action_detector_histogram.py"
        name="action_detector_histogram" respawn="true" output="screen">
    <remap from="~input" to="/preprocess_gray_image/output" />
    <rosparam>
      pixel_value_threshold: 10
      pixel_ratio_threshold: 0.3
      lazy: false
    </rosparam>
  </node>

  <group if="$(arg gui)">
    <!-- visualize mono blur spectrogram with jet colormap-->
    <node pkg="image_view" type="image_view" name="subtracted_spectrogram_to_jet"  >
      <remap from="image" to="/preprocess_gray_image/output" />
      <rosparam>
        <!-- set all pixels between 0 and 255 -->
        do_dynamic_scaling: true
        <!-- use jet colormap -->
        colormap: 2
      </rosparam>
    </node>

    <!-- Visualize single channel histogram -->
    <!-- Copied from jsk_perception/sample/sample_single_channel_histogram.launch -->
    <node name="single_channel_histogram"
          pkg="nodelet" type="nodelet"
          args="standalone jsk_perception/SingleChannelHistogram">
      <remap from="~input" to="/preprocess_gray_image/output"/>
      <rosparam>
        use_mask: false
        hist_size: 50
      </rosparam>
    </node>
    <node name="color_histogram_to_histogram_with_range"
          pkg="topic_tools" type="transform"
          args="/single_channel_histogram/output
                /color_histogram_to_histogram_with_range/output
                jsk_recognition_msgs/HistogramWithRange
                &quot;
                jsk_recognition_msgs.msg.HistogramWithRange(
                header=m.header,
                bins=[
                jsk_recognition_msgs.msg.HistogramWithRangeBin(
                min_value=i * 255.0 / len(m.histogram),
                max_value=(i + 1) * 255.0 / len(m.histogram),
                count=x) for i, x in enumerate(m.histogram)
                ])
                &quot;
                --import jsk_recognition_msgs
                --wait-for-start"/>
    <node name="rqt_histogram_plot"
          pkg="jsk_rqt_plugins" type="rqt_histogram_plot"
          args="/color_histogram_to_histogram_with_range/output"/>
  </group>

</launch>

<!-- <!-\- visualize spectrum -\-> -->
<!-- <!-\- <node pkg="jsk_perception" type="spectrum_plot.py" name="spectrum_plot"  > -\-> -->
<!-- <!-\-   <remap from="~spectrum" to="/audio_to_spectrum/spectrum_filtered" /> -\-> -->
<!-- <!-\- </node> -\-> -->

<!-- <!-\- visualize mono spectrogram with jet colormap-\-> -->
<!-- <node pkg="image_view" type="image_view" name="subtracted_spectrogram_to_jet"  > -->
<!--   <remap from="image" to="/noise_subtractor/subtracted_spectrogram" /> -->
<!--   <rosparam> -->
<!--     <!-\- set all pixels between 0 and 255 -\-> -->
<!--     do_dynamic_scaling: true -->
<!--     <!-\- use jet colormap -\-> -->
<!--     colormap: 2 -->
<!--   </rosparam> -->
<!-- </node> -->

<!-- <!-\- Publish whether the robot is in action or not to rostopic, by MT method. -\-> -->
<!-- <node  pkg="decopin_hand" type="action_detector_mt.py" name="action_detector_mt" output="screen"> -->
<!--   <remap from="~raw_spectrogram" to="/spectrum_to_spectrogram/spectrogram" /> -->
<!--   <rosparam subst_value="true"> -->
<!--     anormal_threshold: $(arg anormal_threshold) -->
<!--   </rosparam> -->
<!-- </node> -->
